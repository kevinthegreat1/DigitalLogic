// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 13.1.0 Build 162 10/23/2013 SJ Web Edition"

// DATE "11/07/2024 15:03:17"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim (Verilog) only
// 

`timescale 1 ps/ 1 ps

module BinaryAdder (
	LEDR,
	SW);
output 	[1:0] LEDR;
input 	[2:0] SW;

// Design Ports Information
// LEDR[1]	=>  Location: PIN_F19,	 I/O Standard: 2.5 V,	 Current Strength: Default
// LEDR[0]	=>  Location: PIN_G19,	 I/O Standard: 2.5 V,	 Current Strength: Default
// SW[2]	=>  Location: PIN_AC27,	 I/O Standard: 2.5 V,	 Current Strength: Default
// SW[0]	=>  Location: PIN_AB28,	 I/O Standard: 2.5 V,	 Current Strength: Default
// SW[1]	=>  Location: PIN_AC28,	 I/O Standard: 2.5 V,	 Current Strength: Default


wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \LEDR[1]~output_o ;
wire \LEDR[0]~output_o ;
wire \SW[1]~input_o ;
wire \SW[2]~input_o ;
wire \SW[0]~input_o ;
wire \inst7~0_combout ;
wire \inst2~0_combout ;


// Location: IOOBUF_X94_Y73_N2
cycloneive_io_obuf \LEDR[1]~output (
	.i(\inst7~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[1]~output .bus_hold = "false";
defparam \LEDR[1]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X69_Y73_N16
cycloneive_io_obuf \LEDR[0]~output (
	.i(\inst2~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[0]~output .bus_hold = "false";
defparam \LEDR[0]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOIBUF_X115_Y14_N1
cycloneive_io_ibuf \SW[1]~input (
	.i(SW[1]),
	.ibar(gnd),
	.o(\SW[1]~input_o ));
// synopsys translate_off
defparam \SW[1]~input .bus_hold = "false";
defparam \SW[1]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X115_Y15_N8
cycloneive_io_ibuf \SW[2]~input (
	.i(SW[2]),
	.ibar(gnd),
	.o(\SW[2]~input_o ));
// synopsys translate_off
defparam \SW[2]~input .bus_hold = "false";
defparam \SW[2]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X115_Y17_N1
cycloneive_io_ibuf \SW[0]~input (
	.i(SW[0]),
	.ibar(gnd),
	.o(\SW[0]~input_o ));
// synopsys translate_off
defparam \SW[0]~input .bus_hold = "false";
defparam \SW[0]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: LCCOMB_X114_Y17_N8
cycloneive_lcell_comb \inst7~0 (
// Equation(s):
// \inst7~0_combout  = (\SW[1]~input_o  & ((\SW[2]~input_o ) # (\SW[0]~input_o ))) # (!\SW[1]~input_o  & (\SW[2]~input_o  & \SW[0]~input_o ))

	.dataa(\SW[1]~input_o ),
	.datab(gnd),
	.datac(\SW[2]~input_o ),
	.datad(\SW[0]~input_o ),
	.cin(gnd),
	.combout(\inst7~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst7~0 .lut_mask = 16'hFAA0;
defparam \inst7~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCCOMB_X114_Y17_N18
cycloneive_lcell_comb \inst2~0 (
// Equation(s):
// \inst2~0_combout  = \SW[1]~input_o  $ (\SW[2]~input_o  $ (\SW[0]~input_o ))

	.dataa(\SW[1]~input_o ),
	.datab(gnd),
	.datac(\SW[2]~input_o ),
	.datad(\SW[0]~input_o ),
	.cin(gnd),
	.combout(\inst2~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst2~0 .lut_mask = 16'hA55A;
defparam \inst2~0 .sum_lutc_input = "datac";
// synopsys translate_on

assign LEDR[1] = \LEDR[1]~output_o ;

assign LEDR[0] = \LEDR[0]~output_o ;

endmodule
