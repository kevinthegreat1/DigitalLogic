// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/03/2024 14:32:28"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Thunderbird
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Thunderbird_vlg_sample_tst(
	CLK,
	L,
	R,
	Reset,
	sampler_tx
);
input  CLK;
input  L;
input  R;
input  Reset;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or L or R or Reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Thunderbird_vlg_check_tst (
	Lout,
	Rout,
	sampler_rx
);
input [2:0] Lout;
input [2:0] Rout;
input sampler_rx;

reg [2:0] Lout_expected;
reg [2:0] Rout_expected;

reg [2:0] Lout_prev;
reg [2:0] Rout_prev;

reg [2:0] Lout_expected_prev;
reg [2:0] Rout_expected_prev;

reg [2:0] last_Lout_exp;
reg [2:0] last_Rout_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Lout_prev = Lout;
	Rout_prev = Rout;
end

// update expected /o prevs

always @(trigger)
begin
	Lout_expected_prev = Lout_expected;
	Rout_expected_prev = Rout_expected;
end


// expected Lout[ 2 ]
initial
begin
	Lout_expected[2] = 1'bX;
end 
// expected Lout[ 1 ]
initial
begin
	Lout_expected[1] = 1'bX;
end 
// expected Lout[ 0 ]
initial
begin
	Lout_expected[0] = 1'bX;
end 
// expected Rout[ 2 ]
initial
begin
	Rout_expected[2] = 1'bX;
end 
// expected Rout[ 1 ]
initial
begin
	Rout_expected[1] = 1'bX;
end 
// expected Rout[ 0 ]
initial
begin
	Rout_expected[0] = 1'bX;
end 
// generate trigger
always @(Lout_expected or Lout or Rout_expected or Rout)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Lout = %b | expected Rout = %b | ",Lout_expected_prev,Rout_expected_prev);
	$display("| real Lout = %b | real Rout = %b | ",Lout_prev,Rout_prev);
`endif
	if (
		( Lout_expected_prev[0] !== 1'bx ) && ( Lout_prev[0] !== Lout_expected_prev[0] )
		&& ((Lout_expected_prev[0] !== last_Lout_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Lout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Lout_expected_prev);
		$display ("     Real value = %b", Lout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Lout_exp[0] = Lout_expected_prev[0];
	end
	if (
		( Lout_expected_prev[1] !== 1'bx ) && ( Lout_prev[1] !== Lout_expected_prev[1] )
		&& ((Lout_expected_prev[1] !== last_Lout_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Lout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Lout_expected_prev);
		$display ("     Real value = %b", Lout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Lout_exp[1] = Lout_expected_prev[1];
	end
	if (
		( Lout_expected_prev[2] !== 1'bx ) && ( Lout_prev[2] !== Lout_expected_prev[2] )
		&& ((Lout_expected_prev[2] !== last_Lout_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Lout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Lout_expected_prev);
		$display ("     Real value = %b", Lout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Lout_exp[2] = Lout_expected_prev[2];
	end
	if (
		( Rout_expected_prev[0] !== 1'bx ) && ( Rout_prev[0] !== Rout_expected_prev[0] )
		&& ((Rout_expected_prev[0] !== last_Rout_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rout_expected_prev);
		$display ("     Real value = %b", Rout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rout_exp[0] = Rout_expected_prev[0];
	end
	if (
		( Rout_expected_prev[1] !== 1'bx ) && ( Rout_prev[1] !== Rout_expected_prev[1] )
		&& ((Rout_expected_prev[1] !== last_Rout_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rout_expected_prev);
		$display ("     Real value = %b", Rout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rout_exp[1] = Rout_expected_prev[1];
	end
	if (
		( Rout_expected_prev[2] !== 1'bx ) && ( Rout_prev[2] !== Rout_expected_prev[2] )
		&& ((Rout_expected_prev[2] !== last_Rout_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rout_expected_prev);
		$display ("     Real value = %b", Rout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Rout_exp[2] = Rout_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Thunderbird_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg L;
reg R;
reg Reset;
// wires                                               
wire [2:0] Lout;
wire [2:0] Rout;

wire sampler;                             

// assign statements (if any)                          
Thunderbird i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.L(L),
	.Lout(Lout),
	.R(R),
	.Reset(Reset),
	.Rout(Rout)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// L
initial
begin
	L = 1'b0;
	L = #20000 1'b1;
	L = #20000 1'b0;
	L = #160000 1'b1;
	L = #20000 1'b0;
	L = #60000 1'b1;
	L = #20000 1'b0;
	L = #60000 1'b1;
	L = #20000 1'b0;
	L = #20000 1'b1;
	L = #20000 1'b0;
end 

// R
initial
begin
	R = 1'b0;
	R = #100000 1'b1;
	R = #20000 1'b0;
	R = #80000 1'b1;
	R = #20000 1'b0;
	R = #100000 1'b1;
	R = #20000 1'b0;
	R = #60000 1'b1;
	R = #40000 1'b0;
end 

// Reset
initial
begin
	Reset = 1'b1;
	Reset = #20000 1'b0;
end 

Thunderbird_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.L(L),
	.R(R),
	.Reset(Reset),
	.sampler_tx(sampler)
);

Thunderbird_vlg_check_tst tb_out(
	.Lout(Lout),
	.Rout(Rout),
	.sampler_rx(sampler)
);
endmodule

